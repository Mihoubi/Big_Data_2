version: '3' 
services:

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - /tmp/hdfs/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop-hive.env
    ports:
      - "50070:50070"
    networks:
      net_pet:
        ipv4_address: 172.27.1.5
  
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode
    volumes:
      - /tmp/hdfs/datanode:/hadoop/dfs/data
      - ./bank:/bank
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    depends_on:
      - namenode
    ports:
      - "50075:50075"
    networks:
      net_pet:
        ipv4_address: 172.27.1.6
  
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    depends_on:
      - hive-metastore
    networks:
      net_pet:
        ipv4_address: 172.27.1.7
  
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    depends_on:
      - hive-metastore-postgresql
    networks:
      net_pet:
        ipv4_address: 172.27.1.8
  
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    depends_on:
      - datanode
    networks:
      net_pet:
        ipv4_address: 172.27.1.9
    
#  spark-master:
#    image: bde2020/spark-master:2.4.0-hadoop2.7
#    container_name: spark-master
#    ports:
#      - 8080:8080
#      - 7077:7077
#    environment:
#      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
#    env_file:
#      - ./hadoop-hive.env
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.10
#
#  spark-worker:
#    image: bde2020/spark-worker:2.4.0-hadoop2.7
#    container_name: spark-worker
#    depends_on:
#      - spark-master
#    environment:
#      - SPARK_MASTER=spark://spark-master:7077
#      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
#      - HIVE_CORE_CONF_javax_jdo_option_ConnectionURL=jdbc:postgresql://hive-metastore/metastore
#    depends_on:
#      - spark-master
#    ports:
#      - 8081:8081
#    env_file:
#      - ./hadoop-hive.env
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.11

#  zeppelin:
#    image: openkbs/docker-spark-bde2020-zeppelin
#    container_name: zeppelin
#    environment:
#      CORE_CONF_fs_defaultFS: "hdfs://namenode:8020"
#      SPARK_MASTER: "spark://spark-master:7077"
#      MASTER: "spark://spark-master:7077"
#      SPARK_MASTER_URL: spark://spark-master:7077
#      ZEPPELIN_PORT: 8080
#      ZEPPELIN_JAVA_OPTS:
#        -Dspark.driver.memory=1g
#        -Dspark.executor.memory=2g
#    ports:
#      - 19090:8080
#    env_file:
#      - ./hadoop-hive.env
#    volumes:
#      - /tmp/simple-demo/zeppelin/data:/usr/lib/zeppelin/data:rw
#      - /tmp/simple-demo/zeppelin/notebook:/usr/lib/zeppelin/notebook:rw
#    command: /usr/lib/zeppelin/bin/zeppelin.sh
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.12
#

  database:
      image: mysql:5.7
      container_name: database
      ports:
          - "33061:3306"
      command: --init-file /data/application/init.sql
      volumes:
          - /tmp/mysql/data:/var/lib/mysql
          - ./init.sql:/data/application/init.sql
      environment:
          MYSQL_ROOT_USER: root
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: hue
          #MYSQL_USER: root
          MYSQL_PASSWORD: secret
      networks:
        net_pet:
          ipv4_address: 172.27.1.14



  hue:
      image: gethue/hue:20191107-135001
      hostname: hue
      container_name: hue
      dns: 8.8.8.8
      ports:
      - "8888:8888"
      volumes:
        - ./hue-overrides.ini:/usr/share/hue/desktop/conf/z-hue.ini
      depends_on:
      - "database"
      networks:
        net_pet:
          ipv4_address: 172.27.1.13


  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
     net_pet:
       ipv4_address: 172.27.1.15

  kafka:
      image: confluentinc/cp-kafka:6.2.0
      container_name: kafka
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
        - "9101:9101"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ADVERTISED_HOST_NAME: kafka:9092
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      networks:
        net_pet:
          ipv4_address: 172.27.1.16

    #  zookeeper:
#    image: wurstmeister/zookeeper:3.4.6
#    ports:
#      - "2181:2181"
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.15
#
#  kafka:
#    image: wurstmeister/kafka:2.12-2.3.0
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: 172.27.1.16
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS : PLAINTEXT://localhost:9092
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.16



#  streamsets:
#    image: streamsets/datacollector:3.13.0-latest
#    ports:
#      - "18630:18630"
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.17
  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - action.destructive_requires_name=true
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      net_pet:
        ipv4_address: 172.27.1.18
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  kibana:
    image: kibana:7.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      I18N_LOCALE: fr-FR
    restart: always
    ports:
      - "5601:5601"
    networks:
      net_pet:
        ipv4_address: 172.27.1.19
    depends_on:
      - elasticsearch
#  nifi:
#    image: apache/nifi
#    ports:
#      - 8080:8080 # Unsecured HTTP Web Port
#    environment:
#      - NIFI_WEB_HTTP_PORT=8080
#      - NIFI_CLUSTER_IS_NODE=true
#      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
#      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
#      - NIFI_ELECTION_MAX_WAIT=1 min
#    networks:
#      net_pet:
#        ipv4_address: 172.27.1.20

networks:
  net_pet:
    ipam:
      driver: default
      config:
        - subnet: 172.27.0.0/16
